.registration
  .form__secondary-heading
    Find the right talent when you need it

  .form__description
    Sign up to get unlimited access to the Heyfam Network
    of verified designers, developers, and marketers.

  .registration__content
    = link_to "Sign up with Google",
      "#",
      class: "registration__oauth"

    .registration__or
      or

    = form_for @user,
      as: resource_name,
      url: registration_path(resource_name),
      html: { onsubmit: "return validateRegistration();" } do |f|

      = f.fields_for :user_profile, UserProfile.new do |p|
        .form__fields
          .form__field
            = p.label :first_name,
              class: "form__label"
            = p.text_field :first_name,
              class: "form__input",
              id: "user_first_name",
              onfocusout: "validatePresence('#user_first_name');"
            .error-message#user_first_name-error

          .form__field
            = p.label :last_name,
              class: "form__label"
            = p.text_field :last_name,
              class: "form__input",
              id: "user_last_name",
              onfocusout: "validatePresence('#user_last_name');"
            .error-message#user_last_name-error

          .form__field
            = f.label :email,
              class: "form__label"
            = f.email_field :email,
              class: "form__input",
              id: "user_email",
              onfocusout: "validateEmail('#user_email');"
            .error-message#user_email-error

          .form__field
            = f.label :password,
              class: "form__label"
            = f.password_field :password,
              class: "form__input",
              id: "user_password",
              onfocusout: "validatePassword('#user_password');"
            .error-message#user_password-error

          .form__field
            = f.label :password_confirmation,
              class: "form__label"
            = f.password_field :password_confirmation,
              class: "form__input",
              id: "user_password_confirmation",
              onfocusout: "validatePassword('#user_password_confirmation');validatePasswordsMatch('#user_password', '#user_password_confirmation');"
            .error-message#user_password_confirmation-error

        / Role should be safe since it just determines views not security
        = f.fields_for :user_roles, UserRole.new do |r|
          = r.hidden_field :role_id, value: Role.find_by(name: "Employer").id

        = f.submit "Create Account",
          class: "button",
          data: { disable_with: false }
